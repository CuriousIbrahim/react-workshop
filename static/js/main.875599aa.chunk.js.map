{"version":3,"sources":["Components/Form/Form.js","Components/Header/Header.js","App.js","Components/DictionaryEntry/DictionaryEntry.js","Components/Error/Error.js","reportWebVitals.js","index.js"],"names":["Form","props","className","onSubmit","type","value","word","onChange","name","Header","App","state","wordObject","exists","handleInputChange","bind","handleSubmit","e","preventDefault","this","axios","get","then","res","data","setState","catch","err","response","status","event","target","content","phonetic","origin","meanings","map","meaning","definitions","definition","React","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"wVAEO,SAASA,EAAKC,GACjB,OACI,uBAAMC,UAAU,OAAOC,SAAUF,EAAME,SAAvC,UACE,uBAAOC,KAAK,OAAOC,MAAOJ,EAAMK,KAAMC,SAAUN,EAAMM,SAAUC,KAAK,SACrE,uBAAOJ,KAAK,SAASC,MAAM,cCN9B,SAASI,IACZ,OACI,sD,IC0DOC,E,kDArDb,WAAYT,GAAQ,IAAD,8BACjB,cAAMA,IACDU,MAAQ,CAACC,WAAY,KAAMN,KAAM,GAAIO,QAAQ,GAElD,EAAKC,kBAAoB,EAAKA,kBAAkBC,KAAvB,gBACzB,EAAKC,aAAe,EAAKA,aAAaD,KAAlB,gBALH,E,gDAQnB,SAAaE,GAAI,IAAD,OACdA,EAAEC,iBAEF,IAAMZ,EAAOa,KAAKR,MAAML,KAExBc,IAAMC,IAAN,0DAA6Df,IAAQgB,MAAK,SAAAC,GACxE,IAAMC,EAAOD,EAAIC,KAAK,GACtB,EAAKC,SAAS,CAACb,WAAYY,EAAMX,QAAQ,OACxCa,OAAM,SAAAC,GACqB,MAAxBA,EAAIC,SAASC,QACf,EAAKJ,SAAS,CAACZ,QAAQ,S,+BAK7B,SAAkBiB,GAChB,IAAMC,EAASD,EAAMC,OAErBZ,KAAKM,SACH,CAACnB,KAAMyB,EAAO1B,U,oBAIlB,WACE,IAAI2B,ECrCwBpB,ECFTN,EFiDnB,OARKa,KAAKR,MAAME,OAEoB,OAAzBM,KAAKR,MAAMC,YCzCMA,ED0CAO,KAAKR,MAAMC,WAArCoB,ECxCA,sBAAK9B,UAAU,kBAAf,UACE,6BAAKU,EAAWN,OAChB,+BAAKM,EAAWqB,SAAhB,OACA,4BAAIrB,EAAWsB,SACf,qBAAKhC,UAAU,WAAf,SACGU,EAAWuB,SAASC,KAAI,SAAAC,GACvB,OACE,qBAAKnC,UAAU,UAAf,SACE,4BAAImC,EAAQC,YAAY,GAAGC,wBDkCrCP,EAAU,yBE9CO1B,EF0CDa,KAAKR,MAAML,KAA3B0B,EExCE,mDAAsB1B,EAAtB,wBFgDF,sBAAKJ,UAAU,MAAf,UACE,cAACO,EAAD,IACA,cAAC,EAAD,CAAMH,KAAMa,KAAKR,MAAML,KAAMC,SAAUY,KAAKL,kBAAmBX,SAAUgB,KAAKH,eAC7EgB,S,GA/CSQ,IAAMC,WGMTC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBtB,MAAK,YAAkD,IAA/CuB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.875599aa.chunk.js","sourcesContent":["import \"./Form.css\";\n\nexport function Form(props) {\n    return (\n        <form className=\"Form\" onSubmit={props.onSubmit}>\n          <input type=\"text\" value={props.word} onChange={props.onChange} name=\"word\" />\n          <input type=\"submit\" value=\"Search\" />\n        </form>\n    )\n}","export function Header () {\n    return (\n        <h1>My Dictionary App :)</h1>\n    )\n}","import React from \"react\";\nimport axios from 'axios';\nimport './App.css';\nimport { DictionaryEntry, Form, Header, Error } from \"./Components\";\n\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {wordObject: null, word: \"\", exists: true}\n\n    this.handleInputChange = this.handleInputChange.bind(this); \n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  handleSubmit(e) {\n    e.preventDefault();\n\n    const word = this.state.word;\n\n    axios.get(`https://api.dictionaryapi.dev/api/v2/entries/en/${word}`).then(res => {\n      const data = res.data[0];\n      this.setState({wordObject: data, exists: true});\n    }).catch(err => {\n      if (err.response.status === 404) {\n        this.setState({exists: false})\n      }\n    })\n  }\n\n  handleInputChange(event) {    \n    const target = event.target;\n\n    this.setState(\n      {word: target.value}\n    )\n  }\n\n  render() {\n    let content;\n    \n    if (!this.state.exists) {\n      content = Error(this.state.word);\n    } else if (this.state.wordObject !==null) {\n      content = DictionaryEntry(this.state.wordObject);\n    } else {\n      content = <div></div>;\n    }\n\n    return (\n      <div className=\"App\">\n        <Header />\n        <Form word={this.state.word} onChange={this.handleInputChange} onSubmit={this.handleSubmit}/>\n        {content}\n      </div>\n    );\n  }\n}\n\n\nexport default App;\n","import \"./DictionaryEntry.css\";\n\nexport function DictionaryEntry(wordObject) {\n    return (\n      <div className=\"DictionaryEntry\">\n        <h2>{wordObject.word}</h2>\n        <h3>{wordObject.phonetic}/</h3>\n        <p>{wordObject.origin}</p>\n        <div className=\"Meanings\">\n          {wordObject.meanings.map(meaning => {\n            return (\n              <div className=\"Meaning\">\n                <p>{meaning.definitions[0].definition}</p>\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }","export function Error (word) {\n    return (\n        <h1>Error: The word `{word}` does not exist!</h1>\n    )\n}","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}
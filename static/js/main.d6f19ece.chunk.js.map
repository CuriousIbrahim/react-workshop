{"version":3,"sources":["Components/Form/Form.js","Components/Header/Header.js","Components/History/History.js","App.js","Components/DictionaryEntry/DictionaryEntry.js","Components/Error/Error.js","reportWebVitals.js","index.js"],"names":["Form","props","className","onSubmit","type","value","word","onChange","name","Header","History","content","words","map","i","onClick","onWordClick","App","state","wordObject","exists","isError","errorDescription","handleInputChange","bind","handleSubmit","handleSearch","e","preventDefault","this","length","setState","addToList","axios","get","then","res","data","addToWordsList","catch","err","response","status","push","shift","event","target","phonetic","origin","meanings","meaning","definitions","definition","reversedWords","slice","reverse","React","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.d6f19ece.chunk.js","sourcesContent":["import \"./Form.css\";\n\nexport function Form(props) {\n    return (\n        <form className=\"Form\" onSubmit={props.onSubmit}>\n          <input type=\"text\" value={props.word} onChange={props.onChange} name=\"word\" />\n          <input type=\"submit\" value=\"Search\" />\n        </form>\n    )\n}","export function Header () {\n    return (\n        <h1>My Dictionary App :)</h1>\n    )\n}","import \"./History.css\";\n\nexport function History(props) {\n  const words = props.words;\n\n  const content = words.map((word, i) => (\n    <li className=\"ListItem\" key={i} onClick={() => props.onWordClick(word)}>\n      {word}\n    </li>\n  ));\n\n  return (\n    <div className=\"History\">\n      <h2>History</h2>\n      <ol>{content}</ol>\n    </div>\n  );\n}\n","import React from \"react\";\nimport axios from \"axios\";\nimport \"./App.css\";\nimport { DictionaryEntry, Form, Header, Error, History } from \"./Components\";\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      wordObject: null,\n      word: \"\",\n      exists: true,\n      words: [],\n      isError: false,\n      errorDescription: \"\",\n    };\n\n    this.handleInputChange = this.handleInputChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.handleSearch = this.handleSearch.bind(this);\n  }\n\n  handleSubmit(e) {\n    e.preventDefault();\n\n    const word = this.state.word;\n\n    if (word.length === 0) {\n      this.setState({\n        isError: true,\n        errorDescription: \"Do not leave input empty\",\n      });\n\n      return;\n    }\n\n    this.handleSearch(word, true);\n  }\n\n  handleSearch(word, addToList = false) {\n    axios\n      .get(`https://api.dictionaryapi.dev/api/v2/entries/en/${word}`)\n      .then((res) => {\n        const data = res.data[0];\n\n        if (addToList) {\n          this.addToWordsList(word);\n        }\n\n        this.setState({ wordObject: data, isError: false });\n      })\n      .catch((err) => {\n        if (err.response.status === 404) {\n          this.setState({\n            isError: true,\n            errorDescription: `The word ${this.state.word} does not exist`,\n          });\n        }\n      });\n  }\n\n  addToWordsList(word) {\n    this.state.words.push(word);\n\n    if (this.state.words.length > 5) {\n      this.state.words.shift();\n    }\n  }\n\n  handleInputChange(event) {\n    const target = event.target;\n\n    this.setState({ word: target.value });\n  }\n\n  render() {\n    let content;\n\n    if (this.state.isError) {\n      content = Error(this.state.errorDescription);\n    } else if (this.state.wordObject !== null) {\n      content = DictionaryEntry(this.state.wordObject);\n    } else {\n      content = <div></div>;\n    }\n\n    const { words } = this.state;\n\n    const reversedWords = words.slice().reverse();\n\n    return (\n      <div className=\"App\">\n        <div className=\"Main\">\n          <div className=\"Search\">\n            <Header />\n            <Form\n              word={this.state.word}\n              onChange={this.handleInputChange}\n              onSubmit={this.handleSubmit}\n            />\n            {content}\n          </div>\n          <History words={reversedWords} onWordClick={this.handleSearch} />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import \"./DictionaryEntry.css\";\n\nexport function DictionaryEntry(wordObject) {\n    return (\n      <div className=\"DictionaryEntry\">\n        <h2>{wordObject.word}</h2>\n        <h3>{wordObject.phonetic}/</h3>\n        <p>{wordObject.origin}</p>\n        <div className=\"Meanings\">\n          {wordObject.meanings.map(meaning => {\n            return (\n              <div className=\"Meaning\">\n                <p>{meaning.definitions[0].definition}</p>\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }","export function Error(errorDescription) {\n  return <h1>Error: {errorDescription}</h1>;\n}\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}